apply plugin:'application'

description = 'Collect top-level Java artifacts'

dependencies {
   runtime project(':mmstudio')

   // Due to the inverted dependency of acqEngine on mmstudio, we need to list
   // it here; otherwise nothing may depend on acqEngine
   runtime project(':acqEngine')

   runtime project(':autofocus:HardwareFocusExtender')
   runtime project(':autofocus:MMAutofocus')
   runtime project(':autofocus:MMAutofocusDuo')
   runtime project(':autofocus:MMAutofocusTB')
   runtime project(':autofocus:MMOughtaFocus')

   runtime project(':plugins:ASIdiSPIM')
   runtime project(':plugins:AcquireMultipleRegions')
   runtime project(':plugins:CRISP')
   runtime project(':plugins:CRISPv2')
   runtime project(':plugins:Duplicator')
   runtime project(':plugins:FrameCombiner')
   runtime project(':plugins:Gaussian')
   runtime project(':plugins:HCS')
   runtime project(':plugins:ImageFlipper')
   runtime project(':plugins:IntelligentAcquisition')
   runtime project(':plugins:MMClearVolumePlugin')
   runtime project(':plugins:MultiAndor')
   runtime project(':plugins:MultiChannelShading')
   runtime project(':plugins:PipelineSaver')
   runtime project(':plugins:Projector')
   runtime project(':plugins:Recall')
   runtime project(':plugins:SequenceBufferMonitor')
   runtime project(':plugins:SlideExplorer')
   runtime project(':plugins:SnapOnMove')
   runtime project(':plugins:SplitView')
   runtime project(':plugins:Tracker')
   runtime project(':plugins:WhiteBalance')
   runtime project(':plugins:ZProjector')
   runtime project(':plugins:autolase')
   runtime project(':plugins:pgFocus')

   runtime project(':libraries:Big')
}

// Extract the native libraries for Gluegen and Jogl.
//
// We do not rely on the automatic mechanism, because it can fail, e.g., if the
// directory is not writable.
// See https://jogamp.org/jogl/doc/userguide/#automatednativelibraryloading
//
// TODO We could completely disable the automated loading by setting
// -Djogamp.gluegen.UseTempJarCache=false and just make sure the libraries are
// on java.library.path. If we do so, we can also leave out the -native- jars
// from the distribution. This method will make sense especially if we move
// libMMCoreJ_wrap and device adapters to a subdirectory, something that should
// be done when the build system is not otherwise in flux. (See also ImageJ2's
// directory structure for native libraries.)
task stageJogampNatives(type:Copy) {
   from configurations.runtime.asFileTree.findAll {
      it.name =~ ~"[-a-z]+-[.0-9]+-natives-[a-z]+-[0-9a-z]+\\.jar"
   }.collect {
      zipTree(it)
   }

   // Selection of platform/arch should be done when specifying dependencies,
   // so no filtering here.
   include 'natives/linux-*/*.so'
   include 'natives/macosx-*/*.jnilib'
   include 'natives/windows-*/*.dll'

   into project.stageDir
}

task stageBindist(type:Copy) {
   from rootProject.file('bindist/any-platform')
   into project.stageDir
}

task stage(type:Copy) {
   dependsOn(installDist)
   dependsOn(stageJogampNatives)
   dependsOn(stageBindist)

   from configurations.runtime
   into new File(project.stageDir, 'plugins/Micro-Manager')
}

mainClassName = 'ij.ImageJ'
applicationDefaultJvmArgs = [
   '-Xms512M',
   '-Xmx2014M',
   '-XX:MaxDirectMemorySize=4G',
   '-XX:CICompilerCount=2',
   '-XX:+UseConcMarkSweepGC',
   '-XX:MaxGCPauseMillis=67',
   '-Dsun.java.dpiaware=false',
]

run {
   dependsOn(stage)

   workingDir rootProject.file('stage')

   if (!System.getProperty('os.name').toLowerCase().startsWith('windows')) {
      systemProperties('mmcorej.library.path':rootProject.file('MMCoreJ_wrap/.libs').getAbsolutePath())
      args '-eval', 'run("Micro-Manager Studio");'
   }
   else {
      def arch = System.getProperty('os.arch').equals('amd64') ? 'x64' : 'Win32'
      systemProperties('mmcorej.library.path':rootProject.file('build/Release/' + arch).getAbsolutePath())
      // '-eval' seems to fail on Windows due to a string quoting issue, so
      // leave out for now
   }
}
